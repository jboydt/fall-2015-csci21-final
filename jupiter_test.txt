unsigned int unittest ()
{
	unsigned int testsPassed = 0;
	RocketShip ship;
	
	cout << "\nTEST FUEL CELLS :: UPGRADED ROCKET SHIP\n\n";

	try {
		btassert<bool>(ship.getName() == "RS NullPointer" && ship.getFuel() == 1000);
		cout << "Passed TEST 1: constructor \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 1: constructor #\n";
	}
	
	ship.setName("RS FuelGuzzler");
	try {
		btassert<bool>(ship.getName() == "RS FuelGuzzler");
		cout << "Passed TEST 2: setName/getName \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 2: setName/getName #\n";
	}
	
	ship.setFuel(9999);
	try {
		btassert<bool>(ship.getFuel() == 9999);
		cout << "Passed TEST 3: setFuel/getFuel \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 3: setFuel/getFuel #\n";
	}
	
	ship.addFuelCell(10);
	try {
		btassert<bool>(ship.burnFuel(0) == "**********");
		cout << "Passed TEST 4: addFuelCell/burnFuel \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 4: addFuelCell/burnFuel #\n";
	}
	
	try {
		btassert<bool>(ship.addFuelToCell(0, 5) == true && ship.burnFuel(0) == "*****");
		cout << "Passed TEST 5: addFuelToCell/burnFuel \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 5: addFuelToCell/burnFuel #\n";
	}
	
	cout << "\nSTRESS TESTS\n\n";
	
	try {
		btassert<bool>(ship.removeFuelCell(0) == true && ship.burnFuel(0) == "");
		cout << "Passed TEST 6: removeFuelCell/burnFuel \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 6: removeFuelCell/burnFuel #\n";
	}
	
	try {
		btassert<bool>(ship.burnFuel(1) == "");
		cout << "Passed TEST 7: burnFuel (nonexistent cell) \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 7: burnFuel (nonexistent cell) #\n";
	}
	
	try {
		btassert<bool>(ship.addFuelToCell(1, 1) == false);
		cout << "Passed TEST 8: addFuelToCell (nonexistent cell) \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 8: addFuelToCell (nonexistent cell) #\n";
	}
	
	try {
		btassert<bool>(ship.removeFuelCell(1) == false);
		cout << "Passed TEST 9: removeFuelCell (nonexistent cell) \n";
		testsPassed++;
	} catch (bool b) {
		cout << "# FAILED TEST 9: removeFuelCell (nonexistent cell) #\n";
	}
	
	cout << "\nTEST FUEL CELLS :: COMPLETE\n\n";
	
	return testsPassed;
}
